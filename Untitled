<!-- Slideshow container -->
<div class="slideshow-container">

  <!-- Full-width images with number and caption text -->
  <div class="mySlides fade">
    <h3>Project 1: StoryTeller</h3>
    <h4>Technologies Used: jQuery, 2 3rd Party APIs, Javascript, HTML, CSS, Modal, and a Carousel</h4>
    <p>Description: For Project 1, I created a book search database with an intuitive UI with object-oriented programming. Used jQuery, Javascript, HTML, and CSS, that utilized 2 APIs, a modal, carousel, and animations.</p>
  </div>

  <div class="mySlides fade">
    <h4>Technologies Used: RESTful backend (API) with MongoDB, Mongoose, Node.JS, Express.JS, EJS Partials, Postman, HTML, and CSS</h4>
    <p>Description: For Project 2, I created a project repository, using full CRUD RESTful service, to keep track of personal personal projects with visual representations and descriptions. I also created a application management section, with full CRUD Restful routing, in which the user can store descriptions of their progress in different job applications, to keep themselves up to date on their applications. </p>
  </div>

  <div class="mySlides fade">
    <h3>Project 3: React Marketplace</h3>
    <h4>Technologies Used: MongodDB, Mongoose, Express, React, JSX, Node.js, Postman, Axios, JavaScript, CSS, and HTML</h4>
    <p>Description: For my third project, I worked with a fellow software engineer to create a single-page application: a resale marketplace, using full CRUD RESTful service allow sellers list, edit, and delete items, while buyers can "buy" items and decrease the total stock shown. I created axios calls from the frontend react application to link the backend RESTful controller routes. </p>
  </div>

  <div class="mySlides fade">
    <h3>Project 4: Calorie Counter</h3>
    <h4>Technologies Used: Python Django, Bcrypt, 3rd Party API, Chart.JS, React, JavaScript, CSS, and HTML</h4>
    <p>Description: I worked with two fellow software engineers to create a calorie counter that would allow a user to sign in, add calorie counts per item, and take note of a total calorie count for the items inputted. This was implemented by adding a basic calorie item addition interface, using CRUD RESTful routing, and then implementing a one-to-many solution within the Python Django backend and creating a login credential retrieval in the frontend to connect. A search function was implemented, using a 3rd party API, to allow users to search common food items and retrieve a calorie estimate in return.<!-- I worked on chart from chart.JS will tally the total calories in a trend from the days that the user had input calorie counts. --></p>
  </div>

  <!-- Next and previous buttons -->
  <a class="prev" onclick="plusSlides(-1)">&#10094;</a>
  <a class="next" onclick="plusSlides(1)">&#10095;</a>
</div>
<br>

<!-- The dots/circles -->
<div style="text-align:center">
  <span class="dot" onclick="currentSlide(1)"></span>
  <span class="dot" onclick="currentSlide(2)"></span>
  <span class="dot" onclick="currentSlide(3)"></span>
  <span class="dot" onclick="currentSlide(4)"></span>
</div>
